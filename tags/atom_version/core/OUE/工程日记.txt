8.10
重新规划了解决方案，删掉了多余文件。并将之前版本备份。
为DX的每一个组件建立一个工程。将DX公共部分放到Base工程里。
DXPreDef.h分裂为DXDefs.h(在Base里)和D3DDefs.h
DXEnc.h删掉 用Include.h来包含DXGraphics工程一般所需文件。
DXInput工程只需包含DXInput.h即可使用输入系统
8.18
为Drawer加入了Transform功能。未测试。
删除Yi的一些多余文件
考虑导出到Ruby语言的问题。其中Resource里的是要导出到Ruby里的。而Feng Men组件为效率型组件，许多使用模板元，是为C++所用。若要导出到Ruby需重新封装。
计划多分一层。
异常类不够完善，计划完善。
9.1
删除DX::GetException，因为会发生对象截取，所以根本不可能智能地选择类。增加THROW_HRESULT宏代替，并重构。
彻底删除Feng组件中的Screen组件。
文档了全局资源对象的情况。新增模板类DependContainer来解决全局资源对象的容器问题。
建立了Utility工程，将便利类函数等转移过去。充满困惑的留在原地。Utility为便利函数及一些抽象集合。
文档了Drawer。Drawer头文件还比较乱。且需要单元测试及性能测试。
9.29
修补了几处Drawer的Bug。
THROW宏有问题，同样发生对象截取，修改。但是导致抛出错误无法记录错误具体信息。未解决。
Drawer目前还是有点乱。Drawer使用的是屏幕坐标，改名为ScreenDrawer，但跟ScreenDrawer性质不太一样，因为ScreenPainter有替代品，是个便利类，而ScreenDrawer还包含了算法，为了方便使用，加入了矩阵变换，因此不是个单纯的屏幕绘制类。
FrameWork尝试地乱写中……
9.30
将GetImageBound改为生成逆时针多边形，并修改了优化顶点算法。
10.10
加入ONEU_VERSION宏
想使用init_seg来保证一些对象首先被初始化，但是使用外部库会让结果变得不确定（内存泄露检测库），最后应取消这些库的使用，并使用init_seg。
10.11
修改了GetImageBound的Bug。
GetImageBound目前为行扫描的实现，可以用类似广搜的办法，从一个点扩展寻找边界。不知道效率怎样。
将File移动到了Utility里（因为其跨平台），并改名为RawFile。
加入了图片的文件名映射，并更改了精灵开始透明度为0的bug。
10.12
修改了ImageMap只加入不删除的Bug（汗）。
10.16
脚本default库加了功能。
修改了Logger的实现。并添加了LogInfo接口，用于记录信息头。
在PaintGroup析构函数加入断言。断言里面所有单位已被析构。并尝试考虑是否应该这样做。
由于上面这个行为，Scene.cpp负责删除LayerGroup。LayerGroup从Renderer.cpp转移到Renderer.h里。
10.17
修正了全局析构时s_ImageMap可能先于GraphicsResMgr_cls的bug。由于全局变量很可能引出各种问题，未处理中...
各个地方加入了init_seg（只有VC编译器支持），没有删除GetInstance。
10.25
加入add-on 让CImage能获取原大小。此功能应该是只有使用DX才有的功能。
重构World类。把GetViewTransform变成ConfigTransform，为了兼容OpenGL。
Sprite类计算长宽时考虑了源矩形。Sprite已变成了足够复杂的类。考虑抽取基类。
10.30
考虑构件系统。
构件系统由表组成。
表可以作为元素嵌套到另一个表里。
为了保证隔离性，无法从子级获取父级的表。
表有继承属性，如果一个表继承自另一个表，那么对表的读操作，若没有在表上读到，则会去读基表。
元素有连接属性，若一个元素连接到另一个元素，那么对元素的操作将会转化到对另一个元素的操作。
类表是特殊的表，里面可以包含类属性信息元素和类创建删除信息元素，普通表不可以包含此元素，这两种元素不能直接被访问。
整个系统由两个顶级表构成，一个是根表，包含了一切。另一个是系统表，包含了系统信息，只有主程序才能对它进行写操作。
根表下对应于每一场景均有一个表。

考虑特效，对一个PaintNode加一个父节点。如何重构？
12.6
错误处理完善。
将Resource移动到Framework
12.11
大型重构
为了做成dll，将WindowsEnc改成了类库的形式。
小的细节没有细细修改。
12.12
准备删除掉用的较少的地方。进行较大的清理，重构。

重构后
3.2 Table 的erase函数一处p误打成last_item悲剧

3.25
调整了Event，将定义移动到cpp。
修改了底层和Core的一些定义。
重构了Stream。
添加Shape，Label。
添加BlendMode和ColorBlendMode左混合右混合等。
完成了Atom核心，易用性不是很好。
为了改善易用性，大致完成了AtomUtility。
添加了Shell，增加了Game的runShell功能和Output以及stream（向Shell输出）功能。
添加了olog和oout宏，替代stream函数的麻烦调用。
增加了Game的SetInputFocus功能，接收窗口WM_CHAR消息和（拟定）接收DirectInput的KeyDown消息。
删除了多余的BroadCast的message函数，改用GetGame().output()或GetGame().stream()

4.10
在这之前完善了许多。
将Exception相关和DXDefs放入Internal文件夹，脱离了SDK所用的头文件依赖。
在未来会彻底删除它们。并将Base和OUE合二为一。